---
# This AWS CloudFormation template
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This example template demonstrates creating a single EC2 instance with UserData that 
  initializes the instances. In this case, the UserData calls cfn-init, which uses 
  the default configSet to initialize the instance.
Parameters:

  pEC2InstanceName:
    Description: The friendly name of the EC2 instance
    Type: String

  pApplicationName:
    Description: The name of the application
    Type: String

  pInstanceProfile:
    Description: The name of the EC2 instance role profile
    Type: String
    AllowedPattern: "[a-zA-Z]+"
    ConstraintDescription: Value must be a role profile name

  pSshKeyName:
    Description: The SSH key to use to access the machine
    Type: AWS::EC2::KeyPair::KeyName
    
  pInstanceSize:
    Description: The size of the EC2 instance
    Default: t2.micro
    Type: String
    AllowedValues:
    - t2.micro
    - t3.nano
    - t3.micro
    - t3.medium
    - m5.large

  pLinuxType:
    Description: The name of the Linux that should be launched with this template
    Type: String
    Default: "Amazon"
    AllowedValues:
      - Amazon
      - Ubuntu
      - Ubuntu16

  # TODO: Uncomment out this if there ends up being other resources in this
  # template that require the VPC ID.
  # pVPCId:
  #   Description: The ID of the VPC into which the servers are provisioned.
  #   Type: AWS::EC2::VPC::Id

  pSubnetId:
    Description: A list of the subnet IDs to use for the EC2 instances
    Type: AWS::EC2::Subnet::Id
    
  pEC2SecurityGroupIds:
    Description: The security groups for the EC2 instance
    Type: List<AWS::EC2::SecurityGroup::Id>

Mappings:
  RegionMap:
    us-east-1:
      "Amazon": "ami-035be7bafff33b6b6"
      "Ubuntu": "ami-0ac019f4fcb7cb7e6"
      "Ubuntu16": "ami-0f9cf087c1f27d9b1"
    us-east-2:
      "Amazon": "ami-04328208f4f0cf1fe"
    us-west-1:
      "Amazon": "ami-0799ad445b5727125"
    us-west-2:
      "Amazon": "ami-032509850cf9ee54e"

Resources:

  # The wait handle can be used to make sure that the instances are properly
  # initialized and have the time to call cfn-init.exe
  AppLaunchConfigWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  AppWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref AppLaunchConfigWaitHandle
      # Timeout of 5 minutes. Change this to a higher value if more work is
      # added to the cfn-init process to it doesn't time out.
      Timeout: "600"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          default: 
            - initialize
        initialize:
          commands:
            "hello-world":
              command: "echo \"hello, world\""
              waitUntilAfterCompletion: 0

    Properties:
      ImageId: !FindInMap [ "RegionMap", !Ref "AWS::Region", !Ref "pLinuxType" ]
      InstanceType: !Ref pInstanceSize
      IamInstanceProfile: !Ref pInstanceProfile 
      SecurityGroupIds: !Ref pEC2SecurityGroupIds
      KeyName: !Ref pSshKeyName
      SubnetId: !Ref pSubnetId
      Tags:
        -
          Key: Name
          Value: !Ref pEC2InstanceName
        -
          Key: ApplicationName
          Value: !Ref pApplicationName
      UserData: 
        "Fn::Base64":
          "Fn::Join":
            - ""
            - 
              - "#!/usr/bin/env bash\n"
              # - "yum update -y -q\n"
              - "/opt/aws/bin/cfn-init -v --stack "
              - !Ref "AWS::StackName"
              - " --resource EC2Instance "
              - "--region "
              - !Ref "AWS::Region"
              - "\n"
              - "/opt/aws/bin/cfn-signal -e $? "
              - "Fn::Base64": !Ref AppLaunchConfigWaitHandle
              - "\n"

Outputs: 
  InstanceIPAddress:
    Description: The IP address of the instance that was created
    Value: !Sub ${EC2Instance.PublicIp}
  InstanceHostName:
    Description: The hostname (public) of the EC2 instance that was created
    Value: !Sub ${EC2Instance.PublicDnsName}
  InstancePrivateIPAddress:
    Description: The IP address of the instance that was created
    Value: !Sub ${EC2Instance.PrivateIp}
  InstancePrivateHostName:
    Description: The hostname (public) of the EC2 instance that was created
    Value: !Sub ${EC2Instance.PrivateDnsName}
