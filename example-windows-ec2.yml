---
# This AWS CloudFormation template
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This example template demonstrates creating an Auto Scaling group with a specified
  number of EC2 instances with UserData that initializes the instances. In this case, 
  the UserData calls the cfn-init.exe command, which uses the default configSet to initialize
  the instances.
Parameters:

  pEC2InstanceName:
    Description: The friendly name of the EC2 instance
    Type: String

  pApplicationName:
    Description: The name of the application
    Type: String

  pInstanceProfile:
    Description: The name of the EC2 instance role profile
    Type: String
    AllowedPattern: "[a-zA-Z]+"
    ConstraintDescription: Value must be a role profile name

  pSshKeyName:
    Description: The SSH key to use to access the machine
    Type: AWS::EC2::KeyPair::KeyName
    
  pInstanceSize:
    Description: The size of the EC2 instance
    Default: t3.medium
    Type: String
    AllowedValues:
    - t3.nano
    - t3.micro
    - t3.medium
    - m5.large

  # TODO: Uncomment out this if there ends up being other resources in this
  # template that require the VPC ID.
  # pVPCId:
  #   Description: The ID of the VPC into which the servers are provisioned.
  #   Type: AWS::EC2::VPC::Id

  pSubnetId:
    Description: A list of the subnet IDs to use for the EC2 instances
    Type: AWS::EC2::Subnet::Id
    
  pEC2SecurityGroupIds:
    Description: The security groups for the EC2 instance
    Type: List<AWS::EC2::SecurityGroup::Id>

Mappings:
  RegionMap:
    us-east-1:
      "HVM64": "ami-07a29e78aeb420471"
    us-east-2:
      "HVM64": "ami-0aebcb5a7953a8fae"
    us-west-1:
      "HVM64": "ami-0caf8ef855671a2c0"
    us-west-2:
      "HVM64": "ami-02bc325deb3063e61"

Resources:

  # The wait handle can be used to make sure that the instances are properly
  # initialized and have the time to call cfn-init.exe
  AppLaunchConfigWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  AppWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref AppLaunchConfigWaitHandle
      # Timeout of 5 minutes. Change this to a higher value if more work is
      # added to the cfn-init process to it doesn't time out.
      Timeout: "600"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    # The launch configuration contains the details about how instances should be created
    # in the auto scaling group that is defined later in the template. The launch configuration
    # uses cfn-init to do the heavy lifting in the initialization, and UserData basically just
    # calls cfn-init.exe and then cfn-signal.exe when the init is finished.
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          default: 
            - initialize
        initialize:
          files:
            "c:\\cfn\\cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -s ${AWS::StackName} -r EC2Instance --region ${AWS::Region} 
            # Read about this configuration file and the PowerShell script that is used later
            # at https://docs.amazonaws.cn/en_us/AWSEC2/latest/WindowsGuide/ec2launch.html#ec2launch-sysprep
            "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Config\\DriveLetterMappingConfig.json":
              content: |
                {
                  "driveLetterMapping": [
                    {
                      "volumeName": "xvdf",
                      "driveLetter": "D"
                    }
                  ]
                }
          commands:
            "map-drives":
              command: "powershell.exe -Command C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Scripts\\InitializeDisks.ps1"
              waitUntilAfterCompletion: 0


    Properties:
      ImageId: !FindInMap [ "RegionMap", !Ref "AWS::Region", "HVM64" ]
      InstanceType: !Ref pInstanceSize
      IamInstanceProfile: !Ref pInstanceProfile 
      SecurityGroupIds: !Ref pEC2SecurityGroupIds
      KeyName: !Ref pSshKeyName
      SubnetId: !Ref pSubnetId
      BlockDeviceMappings:
        # Pulled the device Exnames from https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/device_naming.html
        - DeviceName: "xvdf"
          # Look at the mapping here: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html#ec2launch-mapping
          Ebs:
            VolumeSize: 50
      Tags:
        -
          Key: Name
          Value: !Ref pEC2InstanceName
        -
          Key: ApplicationName
          Value: !Ref pApplicationName
      UserData: 
        "Fn::Base64":
          "Fn::Join":
            - ""
            - 
              - "<script>"
              - "cfn-init.exe -v -s "
              - !Ref "AWS::StackName"
              - " -r EC2Instance "
              - "--region "
              - !Ref "AWS::Region"
              - "\n"
              - "cfn-signal.exe -e %ERRORLEVEL% "
              - "Fn::Base64": !Ref AppLaunchConfigWaitHandle
              - "\n"
              - </script>

Outputs: 
  InstanceIPAddress:
    Description: The IP address of the instance that was created
    Value: !Sub ${EC2Instance.PublicIp}
  InstanceHostName:
    Description: The hostname (public) of the EC2 instance that was created
    Value: !Sub ${EC2Instance.PublicDnsName}